{"version":3,"file":"static/js/618.ebc2e843.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactItem/contactItem.module.css?65f5","components/ContactItem/ContactItem.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactAddForm/contactAddForm.module.css?b3e4","components/ContactAddForm/ContactAddForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactFilter/contactFilter.module.css?a156","components/ContactFilter/ContactFilter.jsx","components/ContactList/Loading.jsx","components/ContactList/Erorr.jsx","pages/contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactItemButton\":\"contactItem_contactItemButton__ep-Kd\"};","import css from './contactItem.module.css'\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { fetchDelContact } from 'redux/operations';\n\nconst ContactItem = ({ id, name, phone }) => {\n\n    const dispatch = useDispatch();\n\n    const deleteContact = (e) => {\n        const contactDelID = e.currentTarget.name;\n        console.log(contactDelID);\n        dispatch(fetchDelContact(contactDelID));\n    };\n\n    return (\n        <li>{ name }: { phone } \n            <button\n             name={ id }\n             className={ css.contactItemButton }\n             onClick={ deleteContact }>Delete</button>\n        </li>\n    );\n}\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n}\n\nexport default ContactItem;","import { createSelector } from \"@reduxjs/toolkit\";\n\n//loading\nexport const selectLoadingState = store => store.contacts.isLoading;\n\n//filter\nexport const selectFiltrState = store => store.filter;\n\n//contacts\nexport const selectAllContact = store => store.contacts.items;\n\n//filtered contacts\nexport const selectFileteredContacts = createSelector(\n    [selectAllContact, selectFiltrState],\n    (allContacts, filter) => {\n      if(filter){\n        return allContacts.filter(contact =>      \n        contact.name.toLowerCase().includes(filter.toLowerCase()));\n      } else {\n        return allContacts;\n      }\n}); \n\n//error\nexport const selectErorr = store => store.contacts.error; ","import ContactItem from '../ContactItem/ContactItem';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectFileteredContacts} from 'redux/selectors';\nimport { fetchAllContacts } from 'redux/operations';\n\nconst ContactList = () => {\n \n  const dispatch = useDispatch();\n\n  useEffect(()=>{\n    dispatch(fetchAllContacts());\n  }, [dispatch])\n\n  const filteredContacts = useSelector(selectFileteredContacts);\n\n    return (\n      <ul>\n        {filteredContacts.map((element)=> {\n          return <ContactItem key = { element.id }\n             id = { element.id }\n             name = { element.name }\n             phone = { element.phone }\n          />\n        }) }\n      </ul>   \n    );\n}\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"contactAddForm\":\"contactAddForm_contactAddForm__zthQ0\",\"formInput\":\"contactAddForm_formInput__8NILO\",\"formInputLabel\":\"contactAddForm_formInputLabel__iK4zU\",\"formButton\":\"contactAddForm_formButton__ZSGEg\"};","import css from './contactAddForm.module.css';\nimport { fetchAddContacts } from 'redux/operations';\nimport { useDispatch } from 'react-redux';\n\nconst ContactAddForm = () => {\n\n    const dispatch = useDispatch();\n\n    const hendleSubmit = e => {\n\n        e.preventDefault();\n        const form = e.currentTarget;\n        const name = form.elements.name.value;\n        const phone = form.elements.number.value;\n\n        const newContact = { name, phone }; \n        const request = dispatch(fetchAddContacts(newContact));\n        request.then(res => res.type === \"contacts/fetchAddContact/fulfilled\" && form.reset());\n    \n    }\n\n    return (\n        <form className={css.contactAddForm} onSubmit={ hendleSubmit }>\n                <label className={ css.formInputLabel}>Name\n                    <input\n                      className={ css.formInput}\n                      type=\"text\"\n                      name=\"name\"\n                      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                      required>\n                    </input>\n                </label>\n                <label className={ css.formInputLabel}>Number\n                    <input\n                     className={ css.formInput}\n                      type=\"tel\"\n                      name=\"number\"\n                      pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                      title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                      required\n                    />\n                </label>\n                <button className={ css.formButton } type=\"submit\">Add contact</button>\n            </form>\n    );\n};\n\nexport default ContactAddForm;","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"contactFilter_filter__sEA3-\"};","import css from './contactFilter.module.css';\n// redux\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updFilter } from 'redux/filterSlice';\nimport { selectFiltrState } from 'redux/selectors';\n\nconst ContactFilter = ( ) => {\n\n    const filterState = useSelector(selectFiltrState);\n    const dispatch = useDispatch();\n\n    const  hendleChange = (e) => {\n        const findName = e.currentTarget.value;\n        dispatch(updFilter(findName));\n     };\n\n    return (<div className={ css.filter }>\n        <label>Find contacts by name\n           <input \n             onChange={ hendleChange } \n             value={ filterState }\n             type=\"text\"\n             name=\"filter\"\n             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n             required>\n             </input>\n         </label>\n     </div>)\n};\n\nexport default ContactFilter;","import ReactLoading from 'react-loading';\nimport { selectLoadingState } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\n \nconst Loading = () => {\n    return (useSelector(selectLoadingState) && \n    <ReactLoading type=\"spinningBubbles\" color=\"black\" height={'20%'} width={'20%'} />);\n}\n\nexport default Loading;","import { useSelector } from \"react-redux\";\nimport { selectErorr } from \"redux/selectors\";\nimport Notiflix from \"notiflix\";\n\nconst Erorr = () => {\n    return(useSelector(selectErorr) && Notiflix.Notify.failure(\"Something wrong with API...\"))\n};\n\nexport default Erorr;","import ContactList from \"components/ContactList/ContactList\";\nimport ContactAddForm from \"components/ContactAddForm/ContactAddForm\";\nimport ContactFilter from \"components/ContactFilter/ContactFilter\";\nimport Loading from 'components/ContactList/Loading';\nimport Erorr from 'components/ContactList/Erorr';\n\nconst Contacts = () => {\n   return (<>\n            <Erorr/>\n            <h1>Phonebook</h1>\n            <ContactAddForm />\n            <h2>Contacts</h2>\n            <ContactFilter />\n            <Loading/>\n            <ContactList />\n   </>);\n};\n\nexport default Contacts;"],"names":["id","name","phone","dispatch","useDispatch","className","css","onClick","e","contactDelID","currentTarget","console","log","fetchDelContact","selectLoadingState","store","contacts","isLoading","selectFiltrState","filter","selectFileteredContacts","createSelector","items","allContacts","contact","toLowerCase","includes","selectErorr","error","useEffect","fetchAllContacts","filteredContacts","useSelector","map","element","onSubmit","preventDefault","form","newContact","elements","value","number","fetchAddContacts","then","res","type","reset","pattern","title","required","filterState","onChange","findName","updFilter","color","height","width","Notiflix"],"sourceRoot":""}